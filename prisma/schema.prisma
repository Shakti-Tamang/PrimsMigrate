// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



// for user
model User {

    // userId       String @map("user_id") // Changes the column name to 'user_id' in the database


  id             String       @id @default(uuid())
  email          String       @unique
  password       String       @unique
  name           String
  address        String
  contact        String
  gender         String
  image          String?
  createdDate    DateTime     @default(now())
  status         String
  emailVerified  Boolean
  roles          Role[]
  rmark          String       @db.VarChar()

  // One-to-One relationship with Attendance
  attendance     Attendance? @relation(fields: [attendanceId], references: [id])
  attendanceId   String?     @unique // Foreign key to Attendance, marked as unique

  // One-to-Many relationship with Homework
  homeworks      Homework[]  // One-to-many relationship with Homework

    Authorization Authorization[]



  // email is unique so it is not necessary to make index beacuse it is unique whixh its makes fatser to get email;
        @@index([contact], name: "post_user_idx", type: BTree)
}
model Attendance {
  id        String   @id @default(uuid())
  date      DateTime
  status    String
  // One-to-One relationship with User
  user      User?    @relation // Automatically inferred by Prisma from User model

  @@map("attendance") // Correct table name
}

model Homework {
  id           Int     @id @default(autoincrement())
  topic        String? @map("homeworkTopic")
  status       String
  userId       String // Foreign key to User
  user         User    @relation(fields: [userId], references: [id])

  @@map("homework") // Optional: Custom table name
}


// model homeWork{
// for auto increment in prisma
//  id        Int @id @default(autoincrement())



// }

enum Role {
  ADMIN
  STUDENT
  TEACHER
}
model role{
    roleId        String          @id
  role          Role            @unique
  Authorization Authorization[]
}

model Authorization {
  id        String   @id @unique
  role      role     @relation(fields: [roleId], references: [roleId])
  roleId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  path      String
  method    String[]
}

